package main

import (
	"database/sql"
	// "encoding/json"
	"fmt"
	"log"
	"net/http"

	_ "github.com/go-sql-driver/mysql"
)

const (
	HOST     = "localhost"
	PORT     = "3306"
	DB_NAME  = "go_db"
	PASSWORD = "password"
	DRIVER   = "mysql"
	USER     = "root"
)

var DbConn string = fmt.Sprintf("%s:%s@/%s", USER, PASSWORD, DB_NAME)

type Conn struct {
	c *sql.DB
}

func connectDb() (*Conn, error) {
	conn, err := sql.Open(DRIVER, DbConn)
	if err != nil {
		return nil, fmt.Errorf("ERROR: could not connect to database: %w", err)
	}

	fmt.Println("database connected successfully")
	return &Conn{c: conn}, nil
}

type User struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
	Track     string `json:"track"`
}

func (db *Conn) createUser(u *User) error {
	fmt.Println("pinging database")
	q := `
	INSERT INTO users (first_name, last_name, email, track) 
	VALUES(?, ?, ?, ?)
	`
	res, err := db.c.Exec(q, &u.FirstName, &u.LastName, &u.Email, &u.Track)
	if err != nil {
		return fmt.Errorf("ERROR: could not create user into db:\n %w", err)
	}
	fmt.Println("insert done")

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}
	fmt.Printf("id for user: %s -> %d\n", u.FirstName, id)
	return nil
}

func main() {
	fmt.Println("http://localhost:8480/")
	fmt.Println("http://localhost:8480/static")
	fs := http.FileServer(http.Dir("./static/"))
	u := User{
		FirstName: "Shintarou",
		LastName:  "Mug",
		Track:     "Club Bizzare",
	}
	conn, err := connectDb()
	if err != nil {
		panic(err)
	}

	go func() {
		if err := conn.createUser(&u); err != nil {
			panic(err)
		}
	}()
	// for testing, whenever a user visits this route, lets
	// just create a new user
	http.Handle("/static/", http.StripPrefix("/static/", fs))

	// automatically servers index page
	errC := http.ListenAndServe(":8480", fs)
	if errC != nil {
		log.Fatal("Cannot start file server", errC)
	}
}
